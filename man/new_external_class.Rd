% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/external-class.R
\name{new_external_class}
\alias{new_external_class}
\title{Classes from other packages}
\usage{
new_external_class(package, name, constructor_fun = NULL)
}
\arguments{
\item{package}{Package the class is defined in.}

\item{name}{Name of class, as a string.}

\item{constructor_fun}{A zero-argument function that yields the constructor
of the external class. For expert use only.}
}
\value{
An S7 external class, i.e. a list with class
\code{S7_external_class}.
}
\description{
You need an explicit external class when you want extend a class defined in
another package. An external class ensures that the class definition from
the other package is not literally inlined in your package, ensuring that
when the other package changes your package doesn't need to be rebuilt to
get those changes.

\code{\link[=new_class]{new_class()}} will automatically convert an S7 class to an external class
if its \code{package} property has been set, and it's different to the \code{package}
of the subclass. This should ensure that extending a class in another package
just works without you having to do anything extra.

Extending a class creates a hard requirement on the package that defines it;
i.e. you must list the package in the \code{Imports} field in your package's
\code{DESCRIPTION}.
}
\examples{
foo <- new_class("foo", properties = list(x = class_integer))
foo_ex <- new_external_class("S7", "foo", function() foo)

foo2 <- new_class("foo", parent = foo_ex)
foo2()
}
