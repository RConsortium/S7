% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/external-generic.R
\name{new_external_generic}
\alias{new_external_generic}
\alias{external_methods_register}
\title{Generics in other packages}
\usage{
new_external_generic(package, name, dispatch_args, version = NULL)

external_methods_register()
}
\arguments{
\item{package}{Package the generic is defined in.}

\item{name}{Name of generic, as a string.}

\item{dispatch_args}{Character vector giving arguments used for dispatch.}

\item{version}{An optional version the package must meet for the method to
be registered.}
}
\description{
An external generic is a generic defined in another package that you want to
register methods for. To create an external generic, first use
\code{new_external_generic()} to define the name and the dispatch arguments
of the generic:

\if{html}{\out{<div class="sourceCode R">}}\preformatted{generic <- new_external_generic("package", "generic", "x")
}\if{html}{\out{</div>}}

This allows you to define methods for the generic, even if the other
package is not installed:

\if{html}{\out{<div class="sourceCode R">}}\preformatted{methods(generic, my_class) <- function(...) \{\}
}\if{html}{\out{</div>}}

Then call \code{external_methods_register()} in \code{.onLoad()}. This ensures that
your methods are added to the generic when the other package is loaded.

\if{html}{\out{<div class="sourceCode R">}}\preformatted{.onLoad <- function(...) \{
  S7::external_methods_register()
\}
}\if{html}{\out{</div>}}

In tests, you'll need to explicitly call the generic from the external
package with \code{pkg::generic()}.
}
