% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/super.R
\name{super}
\alias{super}
\title{Force method dispatch to use a superclass}
\usage{
super(from, to)
}
\arguments{
\item{from}{An R7 object to cast.}

\item{to}{An R7 class specification, passed to \code{\link[=as_class]{as_class()}}. Must be a
superclass of \code{object}.}
}
\value{
An \code{R7_super} object which should always be passed
immediately to a generic. It has no other special behavior.
}
\description{
\code{super()} causes the dispatch for the next generic to use the method for
the specified superclass. It is useful when you want to implement a method
in terms of the implementation of its superclass.
}
\section{Compared to S3 and S4}{
\code{super()} performs a similar role to \code{\link[=NextMethod]{NextMethod()}} in S3 or
\code{\link[methods:NextMethod]{methods::callNextMethod()}} in S4, but is much more explicit:
\itemize{
\item The class that \code{super()} will dispatch to is known at the time you
write \code{super()}, not only when it's called.
\item All arguments to the generic are explicit; they are not automatically
passed along.
}

This makes \code{super()} more verbose, but substantially easier to
understand and reason about.
}

\examples{
foo1 <- new_class("foo1", properties = list(x = "numeric", y = "numeric"))
foo2 <- new_class("foo2", foo1, properties = list(z = "numeric"))

total <- new_generic("total", "x")
method(total, foo1) <- function(x) x@x + x@y

# This doesn't work because it'll be stuck in an infinite loop:
method(total, foo2) <- function(x) total(x) + x@z

# So instead we use `super()` to call the method for the parent class:
method(total, foo2) <- function(x) total(super(x, to = foo1)) + x@z
total(foo2(1, 2, 3))

# To see the difference between convert() and super() we need a
# method that calls another generic

bar1 <- new_generic("bar1", "x")
method(bar1, foo1) <- function(x) 1
method(bar1, foo2) <- function(x) 2

bar2 <- new_generic("bar2", "x")
method(bar2, foo1) <- function(x) c(1, bar1(x))
method(bar2, foo2) <- function(x) c(2, bar1(x))

obj <- foo2(1, 2, 3)
bar2(obj)
# convert() affects every generic:
bar2(convert(obj, to = foo1))
# super() only affects the _next_ generic:
bar2(super(obj, to = foo1))
}
