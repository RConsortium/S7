% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class.R
\name{new_class}
\alias{new_class}
\title{Create a new R7 class}
\usage{
new_class(
  name,
  parent = R7_object,
  properties = list(),
  constructor = NULL,
  validator = function(x) NULL
)
}
\arguments{
\item{name}{The name of the class, as a string.}

\item{parent}{The parent class.
\itemize{
\item To inherit behaviour from an R7 class, pass the class object.
\item To inherit behaviour from a base type, pass the function you'd use
to construct the object, e.g. \code{character}, \code{integer}.
}}

\item{properties}{A list specifying the properties (data) that
every object of the class will possess. Each property can either be
a named string (specifying the class), or a call to \code{\link[=new_property]{new_property()}},
allowing greater flexibility.}

\item{constructor}{The constructor function. This is optional, unless
you want to control which properties can be set on constructor.}

\item{validator}{A function taking a single argument, the object to validate.

The job of a validator is to determine whether the object is valid,
i.e. if the current property values form an allowed combination. The
types of the properties are always automatically validated so the job of
the validator is to verify that the value of individual properties is
ok (i.e. maybe a property should have length 1, or should always be
positive), or that the combination of values of multiple properties is ok.
It is called after construction and whenever any property is set.

The validator should return \code{NULL} if the object is valid. If not, it
should return a character vector where each element describes a single
problem. It's generally helpful to report as many problems at once
as possible.

See \code{validate()} for more details and examples.}
}
\value{
A object constructor, a function that can be used to create objects
of the given class.
}
\description{
A class specifies the properties (data) that each of its objects will
possess. The class, and its parent, determines which method will be used
when an object is passed to a generic.
}
\examples{
# Create an class that represents a range using a numeric start and end
range <- new_class("range",
  properties = list(
    start = "numeric",
    end = "numeric"
  )
)
r <- range(start = 10, end = 20)
r
# get and set properties with @
r@start
r@end <- 40
r@end

# R7 automatically ensures that properties are of the declared types:
try(range(start = "hello", end = 20))

# But we might also want to use a validator to ensure that start and end
# are length 1, and that start is < end
range <- new_class("range",
  properties = list(
    start = "numeric",
    end = "numeric"
  ),
  validator = function(x) {
    if (length(x@start) != 1) {
      "@start must be a single number"
    } else if (length(x@end) != 1) {
      "@end must be a single number"
    } else if (x@end < x@start) {
      "@end must be great than or equal to @start"
    }
  }
)
try(range(start = c(10, 15), end = 20))
try(range(start = 20, end = 10))

r <- range(start = 10, end = 20)
try(r@start <- 25)
}
