% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/new_checkmate_property.R
\name{new_checkmate_property}
\alias{new_checkmate_property}
\title{Create a new property that is automatically validated by checkmate}
\usage{
new_checkmate_property(
  class = class_any,
  getter = NULL,
  setter = NULL,
  validator = NULL,
  default = NULL,
  name = NULL,
  ...
)
}
\arguments{
\item{class}{Class that the property must be an instance of.
See \code{\link[=as_class]{as_class()}} for details.}

\item{getter}{An optional function used to get the value. The function
should take \code{self} as its sole argument and return the value. If you
supply a \code{getter}, you are responsible for ensuring that it returns
an object of the correct \code{class}; it will not be validated automatically.

If a property has a getter but doesn't have a setter, it is read only.}

\item{setter}{An optional function used to set the value. The function
should take \code{self} and \code{value} and return a modified object.}

\item{validator}{The checkmate check-style function that will be used to
verify the function. Arguments can be passed to this function using
\code{...}.

The validator will be called after the \code{class} has been verified, so
your code can assume that \code{value} has known type.}

\item{default}{When an object is created and the property is not supplied,
what should it default to? If \code{NULL}, defaults to the "empty" instance
of \code{class}.}

\item{name}{Property name, primarily used for error messages. Generally
don't need to set this here, as it's more convenient to supply as a
the element name when defining a list of properties. If both \code{name}
and a list-name are supplied, the list-name will be used.}

\item{...}{arguments to be passed on to the validator function.}
}
\value{
An S7 property, i.e. a list with class \code{S7_property}.
}
\description{
Define a property that has a \code{checkmate::check} function associated. This
makes it simple to define a property with specific expectations that
are validated at the time of object creation.
}
\examples{

has_bool <- new_class(
  "has_bool",
  properties = list(
    bool = new_checkmate_property(
      class = class_logical,
      validator = check_logical,
      len = 1
    )
  ))

hb <- has_bool(bool=T)
hb_fail <- has_bool(bool=22)
}
